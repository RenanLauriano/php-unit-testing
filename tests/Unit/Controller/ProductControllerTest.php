<?php

namespace Tests\Unit\Controller;

use App\Http\Controllers\ProductController;
use App\Http\Requests\StoreUpdateProduct;
use App\Http\Resources\ProductResource;
use App\Services\ProductService;
use PHPUnit\Framework\TestCase;

class ProductControllerTest extends TestCase
{
    protected $productController;

    private $products = [
            "data" => [
                [
                    "id" => 1,
                    "title" => "Product 1",
                    "description" => "Description for Product 1",
                    "created_at" => "2022-11-07T19:46:22.000000Z",
                    "updated_at" => "2022-11-07T19:46:22.000000Z"
                ],
                [
                    "id" => 2,
                    "title" => "Product 2",
                    "description" => "Description for Product 2",
                    "created_at" => "2022-11-07T19:46:30.000000Z",
                    "updated_at" => "2022-11-07T19:46:30.000000Z"
                ]
            ],
            "links" => [
                "first" => "http://localhost:8000/api/products?page=1",
                "last" => "http://localhost:8000/api/products?page=1",
                "prev" => null,
                "next" => null
            ],
            "meta" => [
                "current_page" => 1,
                "from" => 1,
                "last_page" => 1,
                "links" => [
                    [
                        "url" => null,
                        "label" => "&laquo; Previous",
                        "active" => false
                    ],
                    [
                        "url" => "http://localhost:8000/api/products?page=1",
                        "label" => "1",
                        "active" => true
                    ],
                    [
                        "url" => null,
                        "label" => "Next &raquo;",
                        "active" => false
                    ]
                ],
                "path" => "http://localhost:8000/api/products",
                "per_page" => 15,
                "to" => 2,
                "total" => 2
            ]
        ];

    private $product = [
        "title" => "Product 1",
        "description" => "Description for Product 1"
    ];

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $productService = $this->getMockBuilder(ProductService::class)
                                ->disableOriginalConstructor()
                                ->getMock();
        $productService->expects($this->any())->method('getAllProducts')->will($this->returnValue($this->products));
        $productService->expects($this->any())->method('makeProduct')->will($this->returnValue($this->product));
        $productService->expects($this->any())->method('getProductById')->will($this->returnValue($this->product));
        $productService->expects($this->any())->method('updateProduct')->will($this->returnValue(true));
        $productService->expects($this->any())->method('destroyProduct')->will($this->returnValue(true));
        $this->productController = new ProductController($productService);

    }

    /**
     * A basic unit test example.
     *
     * @return void
     */
    public function testGetProducts()
    {
        $this->assertEquals($this->productController->index(), ProductResource::collection($this->products));
    }

    public function testStoreProduct() {
        $request = $this->createRequest('POST', $this->product);

        $this->assertEquals(new ProductResource($this->product), $this->productController->store($request));
    }

    public function testGetProductById() {
        $this->assertEquals(new ProductResource($this->product), $this->productController->show(1));
    }

    public function testUpdateProduct() {
        $request = $this->createRequest('PUT', $this->product);

        $this->assertEquals(true, $this->productController->update($request, 1));
    }

    public function testDestroyProduct() {
        $this->assertEquals(true, $this->productController->destroy(1));
    }

    protected function createRequest(
        $method,
        $content,
        $uri = '/test',
        $server = ['CONTENT_TYPE' => 'application/json'],
        $parameters = [],
        $cookies = [],
        $files = []
    ) {
        $request = new StoreUpdateProduct;
        return $request->createFromBase(
            \Symfony\Component\HttpFoundation\Request::create(
                $uri,
                $method,
                $parameters,
                $cookies,
                $files,
                $server,
                json_encode($content)
            )
        );
    }
}
