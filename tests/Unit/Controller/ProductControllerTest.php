<?php

namespace Tests\Unit\Controller;

use App\Http\Controllers\ProductController;
use App\Http\Requests\StoreUpdateProduct;
use App\Http\Resources\ProductResource;
use App\Services\ProductService;
use PHPUnit\Framework\TestCase;
use Symfony\Component\HttpFoundation\Request;
use Tests\Unit\Traits\ProductHelperTrait;

class ProductControllerTest extends TestCase
{
    use ProductHelperTrait;

    protected $productController;

    private $products;

    private $product;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->product = $this->getProduct(1);
        $this->products = $this->getProductList();

        $productService = $this->getProductServiceMock();

        $productService->expects($this->any())->method('getAllProducts')->willReturn($this->products);
        $productService->expects($this->any())->method('makeProduct')->willReturn($this->product);
        $productService->expects($this->any())->method('getProductById')->willReturn($this->product);
        $productService->expects($this->any())->method('updateProduct')->willReturn(true);
        $productService->expects($this->any())->method('destroyProduct')->willReturn(true);
        $this->productController = new ProductController($productService);

    }


    public function testGetProducts()
    {
        $this->assertEquals($this->productController->index(), ProductResource::collection($this->products));
    }

    public function testStoreProduct() {
        $request = $this->createRequest('POST', $this->product);

        $this->assertEquals(new ProductResource($this->product), $this->productController->store($request));
    }

    public function testGetProductById() {
        $this->assertEquals(new ProductResource($this->product), $this->productController->show(1));
    }

    public function testUpdateProduct() {
        $request = $this->createRequest('PUT', $this->product);

        $this->assertEquals(true, $this->productController->update($request, 1));
    }

    public function testDestroyProduct() {
        $this->assertEquals(true, $this->productController->destroy(1));
    }

    private function createRequest(
        $method,
        $content,
        $uri = '/test',
        $server = ['CONTENT_TYPE' => 'application/json'],
        $parameters = [],
        $cookies = [],
        $files = []
    ) {
        $request = new StoreUpdateProduct;
        return $request->createFromBase(
            Request::create(
                $uri,
                $method,
                $parameters,
                $cookies,
                $files,
                $server,
                json_encode($content)
            )
        );
    }

    private function getProductServiceMock() {
        return  $this->getMockBuilder(ProductService::class)
            ->disableOriginalConstructor()
            ->getMock();
    }
}



class Person {
    private $name;

    public function getName(){
        return $this->name;
    }
}
