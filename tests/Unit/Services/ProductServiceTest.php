<?php

namespace Tests\Unit\Services;

use App\Repositories\ProductRepository;
use App\Services\ProductService;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use PHPUnit\Framework\TestCase;
use stdClass;
use Tests\Unit\Traits\ProductHelperTrait;


class ProductServiceTest extends TestCase
{
    use ProductHelperTrait;

    private $products;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->products = $this->getProductList();
    }

    /**
     * A basic unit test example.
     *
     * @return void
     */
    public function testGetAllProducts()
    {
        $products = $this->getProductList();

        $productRepository = $this->getProductRepositoryMock();
        $productRepository->expects($this->any())->method('getAllProducts')->will($this->returnValue($products));
        $productService = new ProductService($productRepository);

        $this->assertEquals($products, $productService->getAllProducts());
    }

    public function testGetProductById() {
        $productRepository = $this->getProductRepositoryMock();
        $productRepository->expects($this->any())->method('getProductById')->will($this->returnValue(true));
        $productService = new ProductService($productRepository);

        $this->assertTrue($productService->getProductById(1));
    }

    public function testMakeProduct() {
        $productRepository = $this->getProductRepositoryMock();
        $productRepository->expects($this->any())->method('createProduct')->will($this->returnValue(true));
        $productService = new ProductService($productRepository);

        $this->assertTrue($productService->makeProduct($this->getProduct(1)));
    }

    public function testUpdateNonExistentProduct() {
        $productRepository = $this->getProductRepositoryMock();
        $productRepository->expects($this->any())->method('getProductById')->willThrowException(new ModelNotFoundException());
        $productService = new ProductService($productRepository);
        $this->assertFalse($productService->updateProduct(1, $this->getProduct(1)));
    }

    public function testUpdateProduct() {
        $productRepository = $this->getProductRepositoryMock();
        $productRepository->expects($this->any())->method('getProductById')->willReturn(new stdClass());
        $productRepository->expects($this->any())->method('updateProduct')->willReturn(true);
        $productService = new ProductService($productRepository);
        $this->assertTrue($productService->updateProduct(1, $this->getProduct(1)));
    }

    public function testDestroyNonExistentProduct() {
        $productRepository = $this->getProductRepositoryMock();
        $productRepository->expects($this->any())->method('getProductById')->willThrowException(new ModelNotFoundException());
        $productService = new ProductService($productRepository);
        $this->assertFalse($productService->destroyProduct(1));
    }

    public function testDestroyProduct() {
        $productRepository = $this->getProductRepositoryMock();
        $productRepository->expects($this->any())->method('getProductById')->willReturn(new stdClass());
        $productRepository->expects($this->any())->method('destroyProduct')->willReturn(true);
        $productService = new ProductService($productRepository);
        $this->assertTrue($productService->destroyProduct(1));
    }



    private function getProductRepositoryMock(){
        return $this->getMockBuilder(ProductRepository::class)
            ->disableOriginalConstructor()
            ->getMock();
    }

}
